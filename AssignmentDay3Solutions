#-------------------------------------------------------------------------#
#Exercises with lists
#-------------------------------------------------------------------------#
#1. Create a list named "l" with the following values ([1, 4, 9, 10, 23]). Using the Python
#documentation about lists (https://docs.python.org/3.5/tutorial/introduction.
#html#lists) solve the following exercises:

l=[1, 4, 9, 10, 23]
print("l:",l)
print(type(l))

#1. Using list slicing get the sublists [4, 9] and [10, 23].
sub_list1=l[1:3]
print("Sub_l1:",sub_list1)
print(type(sub_list1))

sub_list2=l[len(l)-2:len(l)]
print("sub_list2:",sub_list2)
print(type(sub_list2))

#2. Append the value 90 to the end of the list "l". Check the difference between list
#concatenation and the "append" method.
l[len(l):]=[90]  # or l.append(91)
print("l:",l)

l1=l+[91]  #Concatination Using + sign
print("L1:",l1)

#3. Calculate the average value of all values on the list. You can use the "sum" and
#"len" functions.
l_average=sum(l)/len(l)
print("l_average:",l_average)
print(type(l_average))

#4. Remove the sublist [4, 9].
print("List L:",l)
del l[1]  #Delete value using index
print("List L:",l)
if 9 in l:
    l.remove(9) #Delete value using value
else:
    print("Value 9 not present in list")
print("List L:",l)
#del l[0:3] #Delete values using slicing
print("List L:",l)


#2. Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.

#Sample:  Suppose the following input is supplied to the program:
#without,hello,bag,world
#Then, the output should be:
#bag,hello,without,world

#Hints:
#In case of input data being supplied to the question, it should be assumed to be a console input.

String = input("Please enter comma separated sequence of words:")
print("String entered:", String, type(String))
print("Strin :",String)
l_list=[]
l_list=String.split(',')
print(l_list)
l_list.sort()
print(l_list)
sorted_string=''
for i in range(len(l_list)):
    if i == len(l_list)-1:
        sorted_string=sorted_string+l_list[i]
    else:
        sorted_string=sorted_string+l_list[i]+','

print("sorted_string:",sorted_string, type(sorted_string))


#------------------------
#3.Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
#
#Sample: Suppose the following input is supplied to the program:
#Hello world
#Practice makes perfect#####
#
#--->Then, the output should be:
#HELLO WORLD
#PRACTICE MAKES PERFECT###
#
#Hints:
#In case of input data being supplied to the question, it should be assumed to be a console input.
print("Enter/Paste your content. Ctrl-D or Ctrl-Z ( windows ) to save it.")
finalstr=""
while True:
    strline=input()
    if strline:
        #strline.upper()
        finalstr=finalstr+strline+'\n'
        #line.append(strline)
    else:
        break

print("Input:",finalstr)
print("Output:",finalstr.upper())


#-------------------------------------------------------------------------#
#Exercises with dictionaries
#- Use the python documentation at https://docs.python.org/3/library/stdtypes.
#html#mapping-types-dict to solve the following exercises.
#-------------------------------------------------------------------------#

#Take the following python dictionary:
ages = {
"Peter": 10,
"Isabel": 11,
"Anna": 9,
"Thomas": 10,
"Bob": 10,
"Joseph": 11,
"Maria": 12,
"Gabriel": 10,
}

#1. How many students are in the dictionary? Search for the "len" function.
print("Elements in Dicsnary:",len(ages))

#2. Implement a function that receives the "ages" dictionary as parameter and return
#the average age of the students. Traverse all items on the dictionary using the
#"items" method as above.

def calavgage(age):
    totalage=0
    for key in age:
        totalage=totalage+age[key]

    avgage=totalage/len(age)
    return  avgage
print("Average age:",calavgage(ages))

#3. Implement a function that receives the "ages" dictionary as parameter and returns
#the name of the oldest student.
def oldesage(age):
    a=0
    for key in age:
        if a < age[key]:
            a=age[key]
        else:
            a
    return a

print("Oldes student:",oldesage(ages))

#4. Implement a function that receives the "ages" dictionary and a number "n" and
#returns a new dict where each student is n years older. For instance, new_ages(ages,
#10) returns a copy of "ages" where each student is 10 years older.
def updateage(ageDics, newAge):
    for key in ageDics:
        ageDics[key]=newAge

    return ageDics

newAgeDics=updateage(ages,20)
print("Update Age for all:",newAgeDics)
